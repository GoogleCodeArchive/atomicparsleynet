//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MP4
{
	using System;
	using FRAFV.Binary.Serialization;
	
	
	public partial class ISOMediaBoxes
	{
		
		public partial class ISOMFullBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Version
				Version = ((int)(reader.ReadByte()));
				// Flags
				Flags = ((int)(reader.ReadUInt24()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Version+Flags
					long size = (1 + 3);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Version
				writer.Write(((byte)(Version)));
				// Flags
				writer.WriteInt24(((int)(Flags)));
			}
		}
		
		public partial class InvalidBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class UnknownBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class UnknownParentBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class UnknownUUIDBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class MovieHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				if (Version == 1)
				{
					// CreationTime
					CreationTime = ((DateTime)(reader.ReadMacDate64()));
				}
				else
				{
					// CreationTime
					CreationTime = ((DateTime)(reader.ReadMacDate32()));
				}
				if (Version == 1)
				{
					// ModificationTime
					ModificationTime = ((DateTime)(reader.ReadMacDate64()));
				}
				else
				{
					// ModificationTime
					ModificationTime = ((DateTime)(reader.ReadMacDate32()));
				}
				// TimeScale
				TimeScale = ((int)(reader.ReadInt32()));
				if (Version == 1)
				{
					// Duration
					Duration = ((long)(reader.ReadInt64()));
				}
				else
				{
					// Duration
					Duration = ((long)(reader.ReadUInt32()));
				}
				// PreferredRate
				PreferredRate = ((Fixed<uint, x16>)(reader.ReadUInt32()));
				// PreferredVolume
				PreferredVolume = ((Fixed<ushort, x8>)(reader.ReadUInt16()));
				// Reserved
				Reserved = ((byte[])(reader.ReadBytes(((int)(10)))));
				if (true)
				{
					var buffer = new uint[9];
					for (int index = 0; (index < 9); index = (index + 1))
					{
						// Matrix
						buffer[index] = ((uint)(reader.ReadUInt32()));
					}
					Matrix = ((TransformMatrix)(buffer));
				}
				// PreviewTime
				PreviewTime = ((int)(reader.ReadInt32()));
				// PreviewDuration
				PreviewDuration = ((int)(reader.ReadInt32()));
				// PosterTime
				PosterTime = ((int)(reader.ReadInt32()));
				// SelectionTime
				SelectionTime = ((int)(reader.ReadInt32()));
				// SelectionDuration
				SelectionDuration = ((int)(reader.ReadInt32()));
				// CurrentTime
				CurrentTime = ((int)(reader.ReadInt32()));
				// NextTrackID
				NextTrackID = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					ResolveVersion(Duration);
					// TimeScale+PreferredRate+PreferredVolume+PreviewTime+PreviewDuration+PosterTime+SelectionTime+SelectionDuration+CurrentTime+NextTrackID
					long size = (base.DataSize 
								+ (((((((((4 + 4) 
								+ 2) 
								+ 4) 
								+ 4) 
								+ 4) 
								+ 4) 
								+ 4) 
								+ 4) 
								+ 4));
					if (Version == 1)
					{
						// CreationTime
						size += 8;
					}
					else
					{
						// CreationTime
						size += 4;
					}
					if (Version == 1)
					{
						// ModificationTime
						size += 8;
					}
					else
					{
						// ModificationTime
						size += 4;
					}
					if (Version == 1)
					{
						// Duration
						size += 8;
					}
					else
					{
						// Duration
						size += 4;
					}
					// Reserved
					size += 10;
					// Matrix
					size += (9 * 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if (Version == 1)
				{
					// CreationTime
					writer.WriteMacDate64(((System.DateTime)(CreationTime)));
				}
				else
				{
					// CreationTime
					writer.WriteMacDate32(((System.DateTime)(CreationTime)));
				}
				if (Version == 1)
				{
					// ModificationTime
					writer.WriteMacDate64(((System.DateTime)(ModificationTime)));
				}
				else
				{
					// ModificationTime
					writer.WriteMacDate32(((System.DateTime)(ModificationTime)));
				}
				// TimeScale
				writer.Write(((int)(TimeScale)));
				if (Version == 1)
				{
					// Duration
					writer.Write(((long)(Duration)));
				}
				else
				{
					// Duration
					writer.Write(((uint)(Duration)));
				}
				// PreferredRate
				writer.Write(((uint)(PreferredRate)));
				// PreferredVolume
				writer.Write(((ushort)(PreferredVolume)));
				// Reserved
				writer.Write(((byte[])(Reserved)) ?? new byte[10], 0, 10);
				if (true)
				{
					var buffer = ((uint[])(Matrix)) ?? new uint[9];
					for (int index = 0; (index < 9); index = (index + 1))
					{
						// Matrix
						writer.Write(((uint)(buffer[index])));
					}
				}
				// PreviewTime
				writer.Write(((int)(PreviewTime)));
				// PreviewDuration
				writer.Write(((int)(PreviewDuration)));
				// PosterTime
				writer.Write(((int)(PosterTime)));
				// SelectionTime
				writer.Write(((int)(SelectionTime)));
				// SelectionDuration
				writer.Write(((int)(SelectionDuration)));
				// CurrentTime
				writer.Write(((int)(CurrentTime)));
				// NextTrackID
				writer.Write(((int)(NextTrackID)));
			}
		}
		
		public partial class ObjectDescriptorBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// data
				data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// data
					if ((data != null))
					{
						size += ((byte[])(data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// data
				if ((data != null))
				{
					writer.Write(((byte[])(data)));
				}
			}
		}
		
		public partial class EdtsEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				if (Owner.Version == 1)
				{
					// SegmentDuration
					SegmentDuration = ((long)(reader.ReadInt64()));
				}
				else
				{
					// SegmentDuration
					SegmentDuration = ((long)(reader.ReadUInt32()));
				}
				if (Owner.Version == 1)
				{
					// MediaTime
					MediaTime = ((long)(reader.ReadInt64()));
				}
				else
				{
					// MediaTime
					MediaTime = ((long)(reader.ReadUInt32()));
				}
				// MediaRate
				MediaRate = ((int)(reader.ReadUInt16()));
				// Reserved
				Reserved = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// MediaRate+Reserved
					long size = (2 + 2);
					if (Owner.Version == 1)
					{
						// SegmentDuration
						size += 8;
					}
					else
					{
						// SegmentDuration
						size += 4;
					}
					if (Owner.Version == 1)
					{
						// MediaTime
						size += 8;
					}
					else
					{
						// MediaTime
						size += 4;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				if (Owner.Version == 1)
				{
					// SegmentDuration
					writer.Write(((long)(SegmentDuration)));
				}
				else
				{
					// SegmentDuration
					writer.Write(((uint)(SegmentDuration)));
				}
				if (Owner.Version == 1)
				{
					// MediaTime
					writer.Write(((long)(MediaTime)));
				}
				else
				{
					// MediaTime
					writer.Write(((uint)(MediaTime)));
				}
				// MediaRate
				writer.Write(((ushort)(MediaRate)));
				// Reserved
				writer.Write(((ushort)(Reserved)));
			}
		}
		
		public partial class EditListBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				entryList.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// entryList
					var item = new EdtsEntry();
					entryList.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					ResolveVersion();
					long size = base.DataSize;
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(entryList)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((EdtsEntry)(enumerator.Current));
						// entryList
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				writer.Write(((int)(entryList.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(entryList)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((EdtsEntry)(enumerator.Current));
					// entryList
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class EditBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class UserDataBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class MovieBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class TrackHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				if (Version == 1)
				{
					// CreationTime
					CreationTime = ((DateTime)(reader.ReadMacDate64()));
				}
				else
				{
					// CreationTime
					CreationTime = ((DateTime)(reader.ReadMacDate32()));
				}
				if (Version == 1)
				{
					// ModificationTime
					ModificationTime = ((DateTime)(reader.ReadMacDate64()));
				}
				else
				{
					// ModificationTime
					ModificationTime = ((DateTime)(reader.ReadMacDate32()));
				}
				// TrackID
				TrackID = ((int)(reader.ReadInt32()));
				// Reserved1
				Reserved1 = ((int)(reader.ReadInt32()));
				if (Version == 1)
				{
					// Duration
					Duration = ((long)(reader.ReadInt64()));
				}
				else
				{
					// Duration
					Duration = ((long)(reader.ReadUInt32()));
				}
				// Reserved2
				Reserved2 = ((byte[])(reader.ReadBytes(((int)(8)))));
				// Layer
				Layer = ((ushort)(reader.ReadUInt16()));
				// AlternateGroup
				AlternateGroup = ((ushort)(reader.ReadUInt16()));
				// Volume
				Volume = ((Fixed<ushort, x8>)(reader.ReadUInt16()));
				// Reserved3
				Reserved3 = ((ushort)(reader.ReadUInt16()));
				if (true)
				{
					var buffer = new uint[9];
					for (int index = 0; (index < 9); index = (index + 1))
					{
						// Matrix
						buffer[index] = ((uint)(reader.ReadUInt32()));
					}
					Matrix = ((TransformMatrix)(buffer));
				}
				// Width
				Width = ((int)(reader.ReadInt32()));
				// Height
				Height = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// TrackID+Reserved1+Layer+AlternateGroup+Volume+Reserved3+Width+Height
					long size = (base.DataSize 
								+ (((((((4 + 4) 
								+ 2) 
								+ 2) 
								+ 2) 
								+ 2) 
								+ 4) 
								+ 4));
					if (Version == 1)
					{
						// CreationTime
						size += 8;
					}
					else
					{
						// CreationTime
						size += 4;
					}
					if (Version == 1)
					{
						// ModificationTime
						size += 8;
					}
					else
					{
						// ModificationTime
						size += 4;
					}
					if (Version == 1)
					{
						// Duration
						size += 8;
					}
					else
					{
						// Duration
						size += 4;
					}
					// Reserved2
					size += 8;
					// Matrix
					size += (9 * 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if (Version == 1)
				{
					// CreationTime
					writer.WriteMacDate64(((System.DateTime)(CreationTime)));
				}
				else
				{
					// CreationTime
					writer.WriteMacDate32(((System.DateTime)(CreationTime)));
				}
				if (Version == 1)
				{
					// ModificationTime
					writer.WriteMacDate64(((System.DateTime)(ModificationTime)));
				}
				else
				{
					// ModificationTime
					writer.WriteMacDate32(((System.DateTime)(ModificationTime)));
				}
				// TrackID
				writer.Write(((int)(TrackID)));
				// Reserved1
				writer.Write(((int)(Reserved1)));
				if (Version == 1)
				{
					// Duration
					writer.Write(((long)(Duration)));
				}
				else
				{
					// Duration
					writer.Write(((uint)(Duration)));
				}
				// Reserved2
				writer.Write(((byte[])(Reserved2)) ?? new byte[8], 0, 8);
				// Layer
				writer.Write(((ushort)(Layer)));
				// AlternateGroup
				writer.Write(((ushort)(AlternateGroup)));
				// Volume
				writer.Write(((ushort)(Volume)));
				// Reserved3
				writer.Write(((ushort)(Reserved3)));
				if (true)
				{
					var buffer = ((uint[])(Matrix)) ?? new uint[9];
					for (int index = 0; (index < 9); index = (index + 1))
					{
						// Matrix
						writer.Write(((uint)(buffer[index])));
					}
				}
				// Width
				writer.Write(((int)(Width)));
				// Height
				writer.Write(((int)(Height)));
			}
		}
		
		public partial class TrackReferenceBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class TrackBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class MediaHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				if (Version == 1)
				{
					// CreationTime
					CreationTime = ((DateTime)(reader.ReadMacDate64()));
				}
				else
				{
					// CreationTime
					CreationTime = ((DateTime)(reader.ReadMacDate32()));
				}
				if (Version == 1)
				{
					// ModificationTime
					ModificationTime = ((DateTime)(reader.ReadMacDate64()));
				}
				else
				{
					// ModificationTime
					ModificationTime = ((DateTime)(reader.ReadMacDate32()));
				}
				// TimeScale
				TimeScale = ((int)(reader.ReadInt32()));
				if (Version == 1)
				{
					// Duration
					Duration = ((long)(reader.ReadInt64()));
				}
				else
				{
					// Duration
					Duration = ((long)(reader.ReadUInt32()));
				}
				// Language
				Language = ((PackedLanguage)(reader.ReadUInt16()));
				// Quality
				Quality = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					ResolveVersion(Duration);
					// TimeScale+Language+Quality
					long size = (base.DataSize 
								+ ((4 + 2) 
								+ 2));
					if (Version == 1)
					{
						// CreationTime
						size += 8;
					}
					else
					{
						// CreationTime
						size += 4;
					}
					if (Version == 1)
					{
						// ModificationTime
						size += 8;
					}
					else
					{
						// ModificationTime
						size += 4;
					}
					if (Version == 1)
					{
						// Duration
						size += 8;
					}
					else
					{
						// Duration
						size += 4;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if (Version == 1)
				{
					// CreationTime
					writer.WriteMacDate64(((System.DateTime)(CreationTime)));
				}
				else
				{
					// CreationTime
					writer.WriteMacDate32(((System.DateTime)(CreationTime)));
				}
				if (Version == 1)
				{
					// ModificationTime
					writer.WriteMacDate64(((System.DateTime)(ModificationTime)));
				}
				else
				{
					// ModificationTime
					writer.WriteMacDate32(((System.DateTime)(ModificationTime)));
				}
				// TimeScale
				writer.Write(((int)(TimeScale)));
				if (Version == 1)
				{
					// Duration
					writer.Write(((long)(Duration)));
				}
				else
				{
					// Duration
					writer.Write(((uint)(Duration)));
				}
				// Language
				writer.Write(((ushort)(Language)));
				// Quality
				writer.Write(((ushort)(Quality)));
			}
		}
		
		public partial class HandlerBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// ComponentType
				ComponentType = ((AtomicCode)(reader.ReadUInt32()));
				// HandlerType
				HandlerType = ((AtomicCode)(reader.ReadUInt32()));
				// Manufacturer
				Manufacturer = ((AtomicCode)(reader.ReadUInt32()));
				// ComponentFlags
				ComponentFlags = ((int)(reader.ReadInt32()));
				// ComponentFlagsMask
				ComponentFlagsMask = ((int)(reader.ReadInt32()));
				// ComponentName
				Read_ComponentName(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// ComponentType+HandlerType+Manufacturer+ComponentFlags+ComponentFlagsMask
					long size = (base.DataSize 
								+ ((((4 + 4) 
								+ 4) 
								+ 4) 
								+ 4));
					// ComponentName
					size += Size_ComponentName();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// ComponentType
				writer.Write(((uint)(ComponentType)));
				// HandlerType
				writer.Write(((uint)(HandlerType)));
				// Manufacturer
				writer.Write(((uint)(Manufacturer)));
				// ComponentFlags
				writer.Write(((int)(ComponentFlags)));
				// ComponentFlagsMask
				writer.Write(((int)(ComponentFlagsMask)));
				// ComponentName
				Write_ComponentName(writer);
			}
		}
		
		public partial class MediaBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class VideoMediaHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// GraphicsMode
				GraphicsMode = ((GraphicsMode)(reader.ReadUInt16()));
				// OpcolorRed
				OpcolorRed = ((ushort)(reader.ReadUInt16()));
				// OpcolorGreen
				OpcolorGreen = ((ushort)(reader.ReadUInt16()));
				// OpcolorBlue
				OpcolorBlue = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// GraphicsMode+OpcolorRed+OpcolorGreen+OpcolorBlue
					long size = (base.DataSize 
								+ (((2 + 2) 
								+ 2) 
								+ 2));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// GraphicsMode
				writer.Write(((ushort)(GraphicsMode)));
				// OpcolorRed
				writer.Write(((ushort)(OpcolorRed)));
				// OpcolorGreen
				writer.Write(((ushort)(OpcolorGreen)));
				// OpcolorBlue
				writer.Write(((ushort)(OpcolorBlue)));
			}
		}
		
		public partial class SoundMediaHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Balance
				Balance = ((Fixed<ushort, x8>)(reader.ReadUInt16()));
				// Reserved
				Reserved = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Balance+Reserved
					long size = (base.DataSize 
								+ (2 + 2));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Balance
				writer.Write(((ushort)(Balance)));
				// Reserved
				writer.Write(((ushort)(Reserved)));
			}
		}
		
		public partial class HintMediaHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// MaxPDUSize
				MaxPDUSize = ((int)(reader.ReadUInt16()));
				// AvgPDUSize
				AvgPDUSize = ((int)(reader.ReadUInt16()));
				// MaxBitrate
				MaxBitrate = ((int)(reader.ReadInt32()));
				// AvgBitrate
				AvgBitrate = ((int)(reader.ReadInt32()));
				// SlidingAverageBitrate
				SlidingAverageBitrate = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// MaxPDUSize+AvgPDUSize+MaxBitrate+AvgBitrate+SlidingAverageBitrate
					long size = (base.DataSize 
								+ ((((2 + 2) 
								+ 4) 
								+ 4) 
								+ 4));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// MaxPDUSize
				writer.Write(((ushort)(MaxPDUSize)));
				// AvgPDUSize
				writer.Write(((ushort)(AvgPDUSize)));
				// MaxBitrate
				writer.Write(((int)(MaxBitrate)));
				// AvgBitrate
				writer.Write(((int)(AvgBitrate)));
				// SlidingAverageBitrate
				writer.Write(((int)(SlidingAverageBitrate)));
			}
		}
		
		public partial class DataReferenceBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// boxArray
				Read_boxArray(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// boxArray
					size += Size_boxArray();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// boxArray
				Write_boxArray(writer);
			}
		}
		
		public partial class DataInformationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class DataEntryURLBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// Location
				Location = new string(encoder.ReadChars(((int)(reader.Length()))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					long size = base.DataSize;
					// Location
					if ((Location != null))
					{
						size += encoding.GetByteCount(Location.ToCharArray());
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// Location
				if ((Location != null))
				{
					encoder.Write(Location.ToCharArray());
				}
			}
		}
		
		public partial class DataEntryURNBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// NameURN
				NameURN = ((string)(encoder.ReadString()));
				// Location
				Location = new string(encoder.ReadChars(((int)(reader.Length()))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					long size = base.DataSize;
					// NameURN
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(NameURN)) ?? "");
					size += encoder.BaseStream.Position;
					// Location
					if ((Location != null))
					{
						size += encoding.GetByteCount(Location.ToCharArray());
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// NameURN
				encoder.Write(((string)(NameURN)) ?? "");
				// Location
				if ((Location != null))
				{
					encoder.Write(Location.ToCharArray());
				}
			}
		}
		
		public partial class SttsEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				// SampleCount
				SampleCount = ((int)(reader.ReadInt32()));
				// SampleDelta
				SampleDelta = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// SampleCount+SampleDelta
					long size = (4 + 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// SampleCount
				writer.Write(((int)(SampleCount)));
				// SampleDelta
				writer.Write(((int)(SampleDelta)));
			}
		}
		
		public partial class TimeToSampleBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				entries.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// entries
					var item = new SttsEntry();
					entries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((SttsEntry)(enumerator.Current));
						// entries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				writer.Write(((int)(entries.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((SttsEntry)(enumerator.Current));
					// entries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class DttsEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				// SampleCount
				SampleCount = ((int)(reader.ReadInt32()));
				// DecodingOffset
				DecodingOffset = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// SampleCount+DecodingOffset
					long size = (4 + 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// SampleCount
				writer.Write(((int)(SampleCount)));
				// DecodingOffset
				writer.Write(((int)(DecodingOffset)));
			}
		}
		
		public partial class CompositionOffsetBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				entries.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// entries
					var item = new DttsEntry();
					entries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((DttsEntry)(enumerator.Current));
						// entries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				writer.Write(((int)(entries.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((DttsEntry)(enumerator.Current));
					// entries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class StsfEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				int count;
				// SampleNumber
				SampleNumber = ((int)(reader.ReadInt32()));
				if (true)
				{
					count = ((int)(reader.ReadInt32()));
					var buffer = new ushort[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// FragmentSizes
						buffer[index] = ((ushort)(reader.ReadUInt16()));
					}
					FragmentSizes = ((ushort[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// SampleNumber
					long size = 4;
					// FragmentSizes
					if ((FragmentSizes != null))
					{
						var buffer = ((ushort[])(FragmentSizes));
						size += (buffer.Length * 2);
					}
					size += 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// SampleNumber
				writer.Write(((int)(SampleNumber)));
				if ((FragmentSizes != null))
				{
					var buffer = ((ushort[])(FragmentSizes));
					writer.Write(((int)(buffer.Length)));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// FragmentSizes
						writer.Write(((ushort)(buffer[index])));
					}
				}
				else
				{
					writer.Write(((int)(0)));
				}
			}
		}
		
		public partial class SampleFragmentBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				entries.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// entries
					var item = new StsfEntry();
					entries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((StsfEntry)(enumerator.Current));
						// entries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				writer.Write(((int)(entries.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((StsfEntry)(enumerator.Current));
					// entries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class ISOMSampleEntryFields
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Reserved
				Reserved = ((byte[])(reader.ReadBytes(((int)(6)))));
				// DataReferenceIndex
				DataReferenceIndex = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// DataReferenceIndex
					long size = 2;
					// Reserved
					size += 6;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Reserved
				writer.Write(((byte[])(Reserved)) ?? new byte[6], 0, 6);
				// DataReferenceIndex
				writer.Write(((ushort)(DataReferenceIndex)));
			}
		}
		
		public partial class GenericSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class ESDBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// data
				data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// data
					if ((data != null))
					{
						size += ((byte[])(data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// data
				if ((data != null))
				{
					writer.Write(((byte[])(data)));
				}
			}
		}
		
		public partial class MPEG4BitRateBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// BufferSizeDB
				BufferSizeDB = ((int)(reader.ReadInt32()));
				// MaxBitRate
				MaxBitRate = ((int)(reader.ReadInt32()));
				// AvgBitRate
				AvgBitRate = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// BufferSizeDB+MaxBitRate+AvgBitRate
					long size = ((4 + 4) 
								+ 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// BufferSizeDB
				writer.Write(((int)(BufferSizeDB)));
				// MaxBitRate
				writer.Write(((int)(MaxBitRate)));
				// AvgBitRate
				writer.Write(((int)(AvgBitRate)));
			}
		}
		
		public partial class MPEG4ExtensionDescriptorsBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class MPEGSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class LASeRConfigurationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Header
				Header = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// Header
					if ((Header != null))
					{
						size += ((byte[])(Header)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Header
				if ((Header != null))
				{
					writer.Write(((byte[])(Header)));
				}
			}
		}
		
		public partial class PixelAspectRatioBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// HSpacing
				HSpacing = ((int)(reader.ReadInt32()));
				// VSpacing
				VSpacing = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// HSpacing+VSpacing
					long size = (4 + 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// HSpacing
				writer.Write(((int)(HSpacing)));
				// VSpacing
				writer.Write(((int)(VSpacing)));
			}
		}
		
		public partial class RVCConfigurationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// PredefinedRVCConfig
				PredefinedRVCConfig = ((ushort)(reader.ReadUInt16()));
				if (PredefinedRVCConfig == 0)
				{
					// RVCMetaIdx
					RVCMetaIdx = ((int)(reader.ReadUInt16()));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// PredefinedRVCConfig
					long size = 2;
					if (PredefinedRVCConfig == 0)
					{
						// RVCMetaIdx
						size += 2;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// PredefinedRVCConfig
				writer.Write(((ushort)(PredefinedRVCConfig)));
				if (PredefinedRVCConfig == 0)
				{
					// RVCMetaIdx
					writer.Write(((ushort)(RVCMetaIdx)));
				}
			}
		}
		
		public partial class ISOMVisualSampleEntry
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Version
				Version = ((ushort)(reader.ReadUInt16()));
				// Revision
				Revision = ((ushort)(reader.ReadUInt16()));
				// Vendor
				Vendor = ((int)(reader.ReadInt32()));
				// TemporalQuality
				TemporalQuality = ((int)(reader.ReadInt32()));
				// SpacialQuality
				SpacialQuality = ((int)(reader.ReadInt32()));
				// Width
				Width = ((ushort)(reader.ReadUInt16()));
				// Height
				Height = ((ushort)(reader.ReadUInt16()));
				// HorizRes
				HorizRes = ((Fixed<uint, x16>)(reader.ReadUInt32()));
				// VertRes
				VertRes = ((Fixed<uint, x16>)(reader.ReadUInt32()));
				// EntryDataSize
				EntryDataSize = ((int)(reader.ReadInt32()));
				// FramesPerSample
				FramesPerSample = ((ushort)(reader.ReadUInt16()));
				// CompressorName
				CompressorName = ((UTF8PadString)(reader.ReadBytes(((int)(32)))));
				// BitDepth
				BitDepth = ((ushort)(reader.ReadUInt16()));
				// ColorTableIndex
				ColorTableIndex = ((short)(reader.ReadInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Version+Revision+Vendor+TemporalQuality+SpacialQuality+Width+Height+HorizRes+VertRes+EntryDataSize+FramesPerSample+BitDepth+ColorTableIndex
					long size = (base.DataSize 
								+ ((((((((((((2 + 2) 
								+ 4) 
								+ 4) 
								+ 4) 
								+ 2) 
								+ 2) 
								+ 4) 
								+ 4) 
								+ 4) 
								+ 2) 
								+ 2) 
								+ 2));
					// CompressorName
					size += 32;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Version
				writer.Write(((ushort)(Version)));
				// Revision
				writer.Write(((ushort)(Revision)));
				// Vendor
				writer.Write(((int)(Vendor)));
				// TemporalQuality
				writer.Write(((int)(TemporalQuality)));
				// SpacialQuality
				writer.Write(((int)(SpacialQuality)));
				// Width
				writer.Write(((ushort)(Width)));
				// Height
				writer.Write(((ushort)(Height)));
				// HorizRes
				writer.Write(((uint)(HorizRes)));
				// VertRes
				writer.Write(((uint)(VertRes)));
				// EntryDataSize
				writer.Write(((int)(EntryDataSize)));
				// FramesPerSample
				writer.Write(((ushort)(FramesPerSample)));
				// CompressorName
				writer.Write(((byte[])(CompressorName)) ?? new byte[32], 0, 32);
				// BitDepth
				writer.Write(((ushort)(BitDepth)));
				// ColorTableIndex
				writer.Write(((short)(ColorTableIndex)));
			}
		}
		
		public partial class AVCConfigurationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// unknownData
				unknownData = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// unknownData
					if ((unknownData != null))
					{
						size += ((byte[])(unknownData)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// unknownData
				if ((unknownData != null))
				{
					writer.Write(((byte[])(unknownData)));
				}
			}
		}
		
		public partial class MPEGVisualSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class GenericVisualSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class ISOMAudioSampleEntry
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Version
				Version = ((ushort)(reader.ReadUInt16()));
				// Revision
				Revision = ((ushort)(reader.ReadUInt16()));
				// Vendor
				Vendor = ((int)(reader.ReadInt32()));
				// ChannelCount
				ChannelCount = ((ushort)(reader.ReadUInt16()));
				// BitsPerSample
				BitsPerSample = ((ushort)(reader.ReadUInt16()));
				// CompressionID
				CompressionID = ((ushort)(reader.ReadUInt16()));
				// PacketSize
				PacketSize = ((ushort)(reader.ReadUInt16()));
				// SampleRateHi
				SampleRateHi = ((ushort)(reader.ReadUInt16()));
				// SampleRateLo
				SampleRateLo = ((ushort)(reader.ReadUInt16()));
				if (Version == 1)
				{
					// Reserved2
					Reserved2 = ((byte[])(reader.ReadBytes(((int)(16)))));
				}
				else
				{
					if (Version == 2)
					{
						// Reserved2
						Reserved2 = ((byte[])(reader.ReadBytes(((int)(36)))));
					}
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Version+Revision+Vendor+ChannelCount+BitsPerSample+CompressionID+PacketSize+SampleRateHi+SampleRateLo
					long size = (base.DataSize 
								+ ((((((((2 + 2) 
								+ 4) 
								+ 2) 
								+ 2) 
								+ 2) 
								+ 2) 
								+ 2) 
								+ 2));
					if (Version == 1)
					{
						// Reserved2
						size += 16;
					}
					else
					{
						if (Version == 2)
						{
							// Reserved2
							size += 36;
						}
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Version
				writer.Write(((ushort)(Version)));
				// Revision
				writer.Write(((ushort)(Revision)));
				// Vendor
				writer.Write(((int)(Vendor)));
				// ChannelCount
				writer.Write(((ushort)(ChannelCount)));
				// BitsPerSample
				writer.Write(((ushort)(BitsPerSample)));
				// CompressionID
				writer.Write(((ushort)(CompressionID)));
				// PacketSize
				writer.Write(((ushort)(PacketSize)));
				// SampleRateHi
				writer.Write(((ushort)(SampleRateHi)));
				// SampleRateLo
				writer.Write(((ushort)(SampleRateLo)));
				if (Version == 1)
				{
					// Reserved2
					writer.Write(((byte[])(Reserved2)) ?? new byte[16], 0, 16);
				}
				else
				{
					if (Version == 2)
					{
						// Reserved2
						writer.Write(((byte[])(Reserved2)) ?? new byte[36], 0, 36);
					}
				}
			}
		}
		
		public partial class MPEGAudioSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class GF3GPPConfigBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// unknownData
				unknownData = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// unknownData
					if ((unknownData != null))
					{
						size += ((byte[])(unknownData)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// unknownData
				if ((unknownData != null))
				{
					writer.Write(((byte[])(unknownData)));
				}
			}
		}
		
		public partial class GenericAudioSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class AC3ConfigBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// data
				data = ((int)(reader.ReadUInt24()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// data
					long size = 3;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// data
				writer.WriteInt24(((int)(data)));
			}
		}
		
		public partial class AC3SampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class DIMSSceneConfigBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// Profile
				Profile = ((byte)(reader.ReadByte()));
				// Level
				Level = ((byte)(reader.ReadByte()));
				// PathComponents
				PathComponents = ((byte)(reader.ReadByte()));
				// FullRequestHost
				FullRequestHost = ((bool)(reader.ReadBoolean()));
				// StreamType
				StreamType = ((bool)(reader.ReadBoolean()));
				// ContainsRedundant
				ContainsRedundant = ((byte)(reader.ReadByte()));
				// TextEncoding
				TextEncoding = ((string)(encoder.ReadString()));
				// ContentEncoding
				ContentEncoding = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// Profile+Level+PathComponents+FullRequestHost+StreamType+ContainsRedundant
					long size = (base.DataSize 
								+ (((((1 + 1) 
								+ 1) 
								+ 1) 
								+ 1) 
								+ 1));
					// TextEncoding
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(TextEncoding)) ?? "");
					size += encoder.BaseStream.Position;
					// ContentEncoding
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ContentEncoding)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// Profile
				writer.Write(((byte)(Profile)));
				// Level
				writer.Write(((byte)(Level)));
				// PathComponents
				writer.Write(((byte)(PathComponents)));
				// FullRequestHost
				writer.Write(((bool)(FullRequestHost)));
				// StreamType
				writer.Write(((bool)(StreamType)));
				// ContainsRedundant
				writer.Write(((byte)(ContainsRedundant)));
				// TextEncoding
				encoder.Write(((string)(TextEncoding)) ?? "");
				// ContentEncoding
				encoder.Write(((string)(ContentEncoding)) ?? "");
			}
		}
		
		public partial class DIMSScriptTypesBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// ContentScriptTypes
				ContentScriptTypes = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					long size = 0;
					// ContentScriptTypes
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ContentScriptTypes)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// ContentScriptTypes
				encoder.Write(((string)(ContentScriptTypes)) ?? "");
			}
		}
		
		public partial class MetaDataSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// ContentEncoding
				ContentEncoding = ((string)(encoder.ReadString()));
				// MIMETypeOrNamespace
				MIMETypeOrNamespace = ((string)(encoder.ReadString()));
				if (AtomicID == DefaultID)
				{
					// XMLSchemaLoc
					XMLSchemaLoc = ((string)(encoder.ReadString()));
				}
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					long size = base.DataSize;
					// ContentEncoding
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ContentEncoding)) ?? "");
					size += encoder.BaseStream.Position;
					// MIMETypeOrNamespace
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(MIMETypeOrNamespace)) ?? "");
					size += encoder.BaseStream.Position;
					if (AtomicID == DefaultID)
					{
						// XMLSchemaLoc
						size -= encoder.BaseStream.Position;
						encoder.Write(((string)(XMLSchemaLoc)) ?? "");
						size += encoder.BaseStream.Position;
					}
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// ContentEncoding
				encoder.Write(((string)(ContentEncoding)) ?? "");
				// MIMETypeOrNamespace
				encoder.Write(((string)(MIMETypeOrNamespace)) ?? "");
				if (AtomicID == DefaultID)
				{
					// XMLSchemaLoc
					encoder.Write(((string)(XMLSchemaLoc)) ?? "");
				}
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class SampleDescriptionBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// boxArray
				Read_boxArray(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// boxArray
					size += Size_boxArray();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// boxArray
				Write_boxArray(writer);
			}
		}
		
		public partial class FixedSampleSizeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				// ConstantSampleSize
				ConstantSampleSize = ((int)(reader.ReadInt32()));
				// SampleCount
				int sampleCount = reader.ReadInt32(); if (ConstantSampleSize != 0) sampleCount = 0;
				if (true)
				{
					count = ((int)(sampleCount));
					var buffer = new int[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// Sizes
						buffer[index] = ((int)(reader.ReadInt32()));
					}
					Sizes = ((int[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// ConstantSampleSize
					long size = (base.DataSize + 4);
					// SampleCount
					size += 4;
					// Sizes
					if ((Sizes != null))
					{
						var buffer = ((int[])(Sizes));
						size += (buffer.Length * 4);
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// ConstantSampleSize
				writer.Write(((int)(ConstantSampleSize)));
				// SampleCount
				writer.Write((int)Sizes.Length);
				if ((Sizes != null))
				{
					var buffer = ((int[])(Sizes));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// Sizes
						writer.Write(((int)(buffer[index])));
					}
				}
			}
		}
		
		public partial class CompactSampleSizeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Reserverd
				Reserverd = ((int)(reader.ReadInt24()));
				// SampleSizeBits
				SampleSizeBits = ((byte)(reader.ReadByte()));
				// Sizes
				Read_Sizes(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Reserverd+SampleSizeBits
					long size = (base.DataSize 
								+ (3 + 1));
					// Sizes
					size += Size_Sizes();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Reserverd
				writer.WriteInt24(((int)(Reserverd)));
				// SampleSizeBits
				writer.Write(((byte)(SampleSizeBits)));
				// Sizes
				Write_Sizes(writer);
			}
		}
		
		public partial class ChunkOffsetBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				if (true)
				{
					count = ((int)(reader.ReadInt32()));
					var buffer = new int[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// Offsets
						buffer[index] = ((int)(reader.ReadInt32()));
					}
					Offsets = ((int[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// Offsets
					if ((Offsets != null))
					{
						var buffer = ((int[])(Offsets));
						size += (buffer.Length * 4);
					}
					size += 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if ((Offsets != null))
				{
					var buffer = ((int[])(Offsets));
					writer.Write(((int)(buffer.Length)));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// Offsets
						writer.Write(((int)(buffer[index])));
					}
				}
				else
				{
					writer.Write(((int)(0)));
				}
			}
		}
		
		public partial class ChunkLargeOffsetBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				if (true)
				{
					count = ((int)(reader.ReadInt32()));
					var buffer = new long[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// Offsets
						buffer[index] = ((long)(reader.ReadInt64()));
					}
					Offsets = ((long[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// Offsets
					if ((Offsets != null))
					{
						var buffer = ((long[])(Offsets));
						size += (buffer.Length * 8);
					}
					size += 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if ((Offsets != null))
				{
					var buffer = ((long[])(Offsets));
					writer.Write(((int)(buffer.Length)));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// Offsets
						writer.Write(((long)(buffer[index])));
					}
				}
				else
				{
					writer.Write(((int)(0)));
				}
			}
		}
		
		public partial class StscEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				// FirstChunk
				FirstChunk = ((int)(reader.ReadInt32()));
				// SamplesPerChunk
				SamplesPerChunk = ((int)(reader.ReadInt32()));
				// SampleDescriptionIndex
				SampleDescriptionIndex = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// FirstChunk+SamplesPerChunk+SampleDescriptionIndex
					long size = ((4 + 4) 
								+ 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// FirstChunk
				writer.Write(((int)(FirstChunk)));
				// SamplesPerChunk
				writer.Write(((int)(SamplesPerChunk)));
				// SampleDescriptionIndex
				writer.Write(((int)(SampleDescriptionIndex)));
			}
		}
		
		public partial class SampleToChunkBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				entries.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// entries
					var item = new StscEntry();
					entries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((StscEntry)(enumerator.Current));
						// entries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				writer.Write(((int)(entries.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((StscEntry)(enumerator.Current));
					// entries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class SyncSampleBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				if (true)
				{
					count = ((int)(reader.ReadInt32()));
					var buffer = new int[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// SampleNumbers
						buffer[index] = ((int)(reader.ReadInt32()));
					}
					SampleNumbers = ((int[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// SampleNumbers
					if ((SampleNumbers != null))
					{
						var buffer = ((int[])(SampleNumbers));
						size += (buffer.Length * 4);
					}
					size += 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if ((SampleNumbers != null))
				{
					var buffer = ((int[])(SampleNumbers));
					writer.Write(((int)(buffer.Length)));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// SampleNumbers
						writer.Write(((int)(buffer[index])));
					}
				}
				else
				{
					writer.Write(((int)(0)));
				}
			}
		}
		
		public partial class StshEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				// ShadowedSampleNumber
				ShadowedSampleNumber = ((int)(reader.ReadInt32()));
				// SyncSampleNumber
				SyncSampleNumber = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// ShadowedSampleNumber+SyncSampleNumber
					long size = (4 + 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// ShadowedSampleNumber
				writer.Write(((int)(ShadowedSampleNumber)));
				// SyncSampleNumber
				writer.Write(((int)(SyncSampleNumber)));
			}
		}
		
		public partial class ShadowSyncBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				entries.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// entries
					var item = new StshEntry();
					entries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((StshEntry)(enumerator.Current));
						// entries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				writer.Write(((int)(entries.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((StshEntry)(enumerator.Current));
					// entries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class DegradationPriorityBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				if (true)
				{
					count = ((int)(reader.Length()/2));
					var buffer = new short[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// Priorities
						buffer[index] = ((short)(reader.ReadInt16()));
					}
					Priorities = ((short[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// Priorities
					if ((Priorities != null))
					{
						var buffer = ((short[])(Priorities));
						size += (buffer.Length * 2);
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if ((Priorities != null))
				{
					var buffer = ((short[])(Priorities));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// Priorities
						writer.Write(((short)(buffer[index])));
					}
				}
			}
		}
		
		public partial class SampleDependencyTypeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// SampleInfo
				SampleInfo = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// SampleInfo
					if ((SampleInfo != null))
					{
						size += ((byte[])(SampleInfo)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// SampleInfo
				if ((SampleInfo != null))
				{
					writer.Write(((byte[])(SampleInfo)));
				}
			}
		}
		
		public partial class SampleEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				int count;
				// SampleDelta
				SampleDelta = ((int)(reader.ReadInt32()));
				subSamples.Clear();
				count = ((int)(reader.ReadUInt16()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// subSamples
					var item = new SubSampleEntry();
					subSamples.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// SampleDelta
					long size = 4;
					size += 2;
					for (var enumerator = ((System.Collections.IEnumerable)(subSamples)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((SubSampleEntry)(enumerator.Current));
						// subSamples
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// SampleDelta
				writer.Write(((int)(SampleDelta)));
				writer.Write(((ushort)(subSamples.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(subSamples)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((SubSampleEntry)(enumerator.Current));
					// subSamples
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class SubSampleEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				if (Owner.Version == 1)
				{
					// SubSampleSize
					SubSampleSize = ((int)(reader.ReadInt32()));
				}
				else
				{
					// SubSampleSize
					SubSampleSize = ((int)(reader.ReadUInt16()));
				}
				// SubSamplePriority
				SubSamplePriority = ((byte)(reader.ReadByte()));
				// Discardable
				Discardable = ((bool)(reader.ReadBoolean()));
				// Reserved
				Reserved = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// SubSamplePriority+Discardable+Reserved
					long size = ((1 + 1) 
								+ 4);
					if (Owner.Version == 1)
					{
						// SubSampleSize
						size += 4;
					}
					else
					{
						// SubSampleSize
						size += 2;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				if (Owner.Version == 1)
				{
					// SubSampleSize
					writer.Write(((int)(SubSampleSize)));
				}
				else
				{
					// SubSampleSize
					writer.Write(((ushort)(SubSampleSize)));
				}
				// SubSamplePriority
				writer.Write(((byte)(SubSamplePriority)));
				// Discardable
				writer.Write(((bool)(Discardable)));
				// Reserved
				writer.Write(((int)(Reserved)));
			}
		}
		
		public partial class SubSampleInformationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				samples.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// samples
					var item = new SampleEntry();
					samples.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(samples)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((SampleEntry)(enumerator.Current));
						// samples
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				writer.Write(((int)(samples.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(samples)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((SampleEntry)(enumerator.Current));
					// samples
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class SampleTableBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class MediaInformationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class FreeSpaceBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class CopyrightBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// Language
				Language = ((PackedLanguage)(reader.ReadUInt16()));
				// Notice
				Notice = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// Language
					long size = (base.DataSize + 2);
					// Notice
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(Notice)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// Language
				writer.Write(((ushort)(Language)));
				// Notice
				encoder.Write(((string)(Notice)) ?? "");
			}
		}
		
		public partial class ChapterEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// StartTime
				StartTime = ((long)(reader.ReadInt64()));
				// Name
				Name = new string(encoder.ReadChars(((int)(reader.ReadByte()))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					// StartTime
					long size = 8;
					// Name
					if ((Name != null))
					{
						size += encoding.GetByteCount(Name.ToCharArray());
					}
					size += 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// StartTime
				writer.Write(((long)(StartTime)));
				// Name
				if ((Name != null))
				{
					writer.Write(((byte)(encoding.GetByteCount(Name))));
					encoder.Write(Name.ToCharArray());
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class ChapterListBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				// Reserved
				Reserved = ((int)(reader.ReadInt32()));
				list.Clear();
				count = ((int)(reader.ReadByte()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// list
					var item = new ChapterEntry();
					list.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Reserved
					long size = (base.DataSize + 4);
					size += 1;
					for (var enumerator = ((System.Collections.IEnumerable)(list)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((ChapterEntry)(enumerator.Current));
						// list
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Reserved
				writer.Write(((int)(Reserved)));
				writer.Write(((byte)(list.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(list)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((ChapterEntry)(enumerator.Current));
					// list
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class TrackReferenceTypeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				int count;
				if (true)
				{
					count = ((int)(reader.Length() / 4));
					var buffer = new int[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// TrackIDs
						buffer[index] = ((int)(reader.ReadInt32()));
					}
					TrackIDs = ((int[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// TrackIDs
					if ((TrackIDs != null))
					{
						var buffer = ((int[])(TrackIDs));
						size += (buffer.Length * 4);
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				if ((TrackIDs != null))
				{
					var buffer = ((int[])(TrackIDs));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// TrackIDs
						writer.Write(((int)(buffer[index])));
					}
				}
			}
		}
		
		public partial class JPEG2000Atom
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Data
				Data = ((uint)(reader.ReadUInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Data
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Data
				writer.Write(((uint)(Data)));
			}
		}
		
		public partial class FileTypeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Brand
				Brand = ((AtomicCode)(reader.ReadUInt32()));
				// Version
				Version = ((int)(reader.ReadInt32()));
				// CompatibleBrand
				Read_CompatibleBrand(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Brand+Version
					long size = (4 + 4);
					// CompatibleBrand
					size += Size_CompatibleBrand();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Brand
				writer.Write(((uint)(Brand)));
				// Version
				writer.Write(((int)(Version)));
				// CompatibleBrand
				Write_CompatibleBrand(writer);
			}
		}
		
		public partial class FontTableBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// unknownData
				unknownData = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// unknownData
					if ((unknownData != null))
					{
						size += ((byte[])(unknownData)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// unknownData
				if ((unknownData != null))
				{
					writer.Write(((byte[])(unknownData)));
				}
			}
		}
		
		public partial class Tx3gSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// DisplayFlags
				DisplayFlags = ((int)(reader.ReadInt32()));
				// HorizontalJustification
				HorizontalJustification = ((sbyte)(reader.ReadSByte()));
				// VerticalJustification
				VerticalJustification = ((sbyte)(reader.ReadSByte()));
				// BackColor
				BackColor = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// DisplayFlags+HorizontalJustification+VerticalJustification+BackColor
					long size = (base.DataSize 
								+ (((4 + 1) 
								+ 1) 
								+ 4));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// DisplayFlags
				writer.Write(((int)(DisplayFlags)));
				// HorizontalJustification
				writer.Write(((sbyte)(HorizontalJustification)));
				// VerticalJustification
				writer.Write(((sbyte)(VerticalJustification)));
				// BackColor
				writer.Write(((int)(BackColor)));
			}
		}
		
		public partial class TextSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// DisplayFlags
				DisplayFlags = ((int)(reader.ReadInt32()));
				// TextJustification
				TextJustification = ((int)(reader.ReadInt32()));
				// BackgroundColor
				BackgroundColor = ((string)(encoder.ReadString()));
				// ForegroundColor
				ForegroundColor = ((string)(encoder.ReadString()));
				// FontNumber
				FontNumber = ((ushort)(reader.ReadUInt16()));
				// FontFace
				FontFace = ((ushort)(reader.ReadUInt16()));
				// Reserved1
				Reserved1 = ((byte[])(reader.ReadBytes(((int)(reader.ReadByte())))));
				// Reserved2
				Reserved2 = ((byte)(reader.ReadByte()));
				// Reserved3
				Reserved3 = ((ushort)(reader.ReadUInt16()));
				// TextName
				TextName = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// DisplayFlags+TextJustification+FontNumber+FontFace+Reserved2+Reserved3
					long size = (base.DataSize 
								+ (((((4 + 4) 
								+ 2) 
								+ 2) 
								+ 1) 
								+ 2));
					// BackgroundColor
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(BackgroundColor)) ?? "");
					size += encoder.BaseStream.Position;
					// ForegroundColor
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ForegroundColor)) ?? "");
					size += encoder.BaseStream.Position;
					// Reserved1
					if ((Reserved1 != null))
					{
						size += ((byte[])(Reserved1)).Length;
					}
					size += 1;
					// TextName
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(TextName)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// DisplayFlags
				writer.Write(((int)(DisplayFlags)));
				// TextJustification
				writer.Write(((int)(TextJustification)));
				// BackgroundColor
				encoder.Write(((string)(BackgroundColor)) ?? "");
				// ForegroundColor
				encoder.Write(((string)(ForegroundColor)) ?? "");
				// FontNumber
				writer.Write(((ushort)(FontNumber)));
				// FontFace
				writer.Write(((ushort)(FontFace)));
				// Reserved1
				if ((Reserved1 != null))
				{
					writer.Write(((byte)(((byte[])(Reserved1)).Length)));
					writer.Write(((byte[])(Reserved1)));
				}
				else
				{
					writer.Write(((byte)(0)));
				}
				// Reserved2
				writer.Write(((byte)(Reserved2)));
				// Reserved3
				writer.Write(((ushort)(Reserved3)));
				// TextName
				encoder.Write(((string)(TextName)) ?? "");
			}
		}
		
		public partial class TextStyleBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// unknownData
				unknownData = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// unknownData
					if ((unknownData != null))
					{
						size += ((byte[])(unknownData)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// unknownData
				if ((unknownData != null))
				{
					writer.Write(((byte[])(unknownData)));
				}
			}
		}
		
		public partial class TextHighlightBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// StartCharOffset
				StartCharOffset = ((ushort)(reader.ReadUInt16()));
				// EndCharOffset
				EndCharOffset = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// StartCharOffset+EndCharOffset
					long size = (2 + 2);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// StartCharOffset
				writer.Write(((ushort)(StartCharOffset)));
				// EndCharOffset
				writer.Write(((ushort)(EndCharOffset)));
			}
		}
		
		public partial class TextHighlightColorBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// HighlightColor
				HighlightColor = ((uint)(reader.ReadUInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// HighlightColor
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// HighlightColor
				writer.Write(((uint)(HighlightColor)));
			}
		}
		
		public partial class KaraokeRecord : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				// HighlightEndTime
				HighlightEndTime = ((int)(reader.ReadInt32()));
				// StartCharOffset
				StartCharOffset = ((ushort)(reader.ReadUInt16()));
				// EndCharOffset
				EndCharOffset = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// HighlightEndTime+StartCharOffset+EndCharOffset
					long size = ((4 + 2) 
								+ 2);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// HighlightEndTime
				writer.Write(((int)(HighlightEndTime)));
				// StartCharOffset
				writer.Write(((ushort)(StartCharOffset)));
				// EndCharOffset
				writer.Write(((ushort)(EndCharOffset)));
			}
		}
		
		public partial class TextKaraokeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// HighlightStartTime
				HighlightStartTime = ((int)(reader.ReadInt32()));
				// NumberEntries
				NumberEntries = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// HighlightStartTime+NumberEntries
					long size = (4 + 2);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// HighlightStartTime
				writer.Write(((int)(HighlightStartTime)));
				// NumberEntries
				writer.Write(((ushort)(NumberEntries)));
			}
		}
		
		public partial class TextScrollDelayBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// ScrollDelay
				ScrollDelay = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// ScrollDelay
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// ScrollDelay
				writer.Write(((int)(ScrollDelay)));
			}
		}
		
		public partial class TextHyperTextBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// StartCharOffset
				StartCharOffset = ((ushort)(reader.ReadUInt16()));
				// EndCharOffset
				EndCharOffset = ((ushort)(reader.ReadUInt16()));
				// URL
				URL = ((string)(encoder.ReadString()));
				// URLHint
				URLHint = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// StartCharOffset+EndCharOffset
					long size = (2 + 2);
					// URL
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(URL)) ?? "");
					size += encoder.BaseStream.Position;
					// URLHint
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(URLHint)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// StartCharOffset
				writer.Write(((ushort)(StartCharOffset)));
				// EndCharOffset
				writer.Write(((ushort)(EndCharOffset)));
				// URL
				encoder.Write(((string)(URL)) ?? "");
				// URLHint
				encoder.Write(((string)(URLHint)) ?? "");
			}
		}
		
		public partial class TextBoxBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// unknownData
				unknownData = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// unknownData
					if ((unknownData != null))
					{
						size += ((byte[])(unknownData)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// unknownData
				if ((unknownData != null))
				{
					writer.Write(((byte[])(unknownData)));
				}
			}
		}
		
		public partial class TextBlinkBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// StartCharOffset
				StartCharOffset = ((ushort)(reader.ReadUInt16()));
				// EndCharOffset
				EndCharOffset = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// StartCharOffset+EndCharOffset
					long size = (2 + 2);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// StartCharOffset
				writer.Write(((ushort)(StartCharOffset)));
				// EndCharOffset
				writer.Write(((ushort)(EndCharOffset)));
			}
		}
		
		public partial class TextWrapBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// WrapFlag
				WrapFlag = ((byte)(reader.ReadByte()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// WrapFlag
					long size = 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// WrapFlag
				writer.Write(((byte)(WrapFlag)));
			}
		}
		
		public partial class TrackSelectionBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				// SwitchGroup
				SwitchGroup = ((int)(reader.ReadInt32()));
				if (true)
				{
					count = ((int)(reader.ReadByte()));
					var buffer = new AtomicCode[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// AttributeList
						buffer[index] = ((AtomicCode)(reader.ReadUInt32()));
					}
					AttributeList = ((AtomicCode[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// SwitchGroup
					long size = (base.DataSize + 4);
					// AttributeList
					if ((AttributeList != null))
					{
						var buffer = ((AtomicCode[])(AttributeList));
						size += (buffer.Length * 4);
					}
					size += 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// SwitchGroup
				writer.Write(((int)(SwitchGroup)));
				if ((AttributeList != null))
				{
					var buffer = ((AtomicCode[])(AttributeList));
					writer.Write(((byte)(buffer.Length)));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// AttributeList
						writer.Write(((uint)(buffer[index])));
					}
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class XMLBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// XML
				XML = new string(encoder.ReadChars(((int)(reader.Length()))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					long size = base.DataSize;
					// XML
					if ((XML != null))
					{
						size += encoding.GetByteCount(XML.ToCharArray());
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// XML
				if ((XML != null))
				{
					encoder.Write(XML.ToCharArray());
				}
			}
		}
		
		public partial class BinaryXMLBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.Length())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class ItemExtentEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				if (Owner.OffsetSize == 4)
				{
					// Offset
					Offset = ((long)(reader.ReadUInt32()));
				}
				else
				{
					if (Owner.OffsetSize == 8)
					{
						// Offset
						Offset = ((long)(reader.ReadInt64()));
					}
				}
				if (Owner.LengthSize == 4)
				{
					// Length
					Length = ((long)(reader.ReadUInt32()));
				}
				else
				{
					if (Owner.LengthSize == 8)
					{
						// Length
						Length = ((long)(reader.ReadInt64()));
					}
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					long size = 0;
					if (Owner.OffsetSize == 4)
					{
						// Offset
						size += 4;
					}
					else
					{
						if (Owner.OffsetSize == 8)
						{
							// Offset
							size += 8;
						}
					}
					if (Owner.LengthSize == 4)
					{
						// Length
						size += 4;
					}
					else
					{
						if (Owner.LengthSize == 8)
						{
							// Length
							size += 8;
						}
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				if (Owner.OffsetSize == 4)
				{
					// Offset
					writer.Write(((uint)(Offset)));
				}
				else
				{
					if (Owner.OffsetSize == 8)
					{
						// Offset
						writer.Write(((long)(Offset)));
					}
				}
				if (Owner.LengthSize == 4)
				{
					// Length
					writer.Write(((uint)(Length)));
				}
				else
				{
					if (Owner.LengthSize == 8)
					{
						// Length
						writer.Write(((long)(Length)));
					}
				}
			}
		}
		
		public partial class ItemLocationEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				int count;
				// ItemID
				ItemID = ((ushort)(reader.ReadUInt16()));
				// DataReferenceIndex
				DataReferenceIndex = ((ushort)(reader.ReadUInt16()));
				if (Owner.BaseOffsetSize == 4)
				{
					// BaseOffset
					BaseOffset = ((long)(reader.ReadUInt32()));
				}
				else
				{
					if (Owner.BaseOffsetSize == 8)
					{
						// BaseOffset
						BaseOffset = ((long)(reader.ReadInt64()));
					}
				}
				extentEntries.Clear();
				count = ((int)(reader.ReadUInt16()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// extentEntries
					var item = new ItemExtentEntry();
					extentEntries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// ItemID+DataReferenceIndex
					long size = (2 + 2);
					if (Owner.BaseOffsetSize == 4)
					{
						// BaseOffset
						size += 4;
					}
					else
					{
						if (Owner.BaseOffsetSize == 8)
						{
							// BaseOffset
							size += 8;
						}
					}
					size += 2;
					for (var enumerator = ((System.Collections.IEnumerable)(extentEntries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((ItemExtentEntry)(enumerator.Current));
						// extentEntries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// ItemID
				writer.Write(((ushort)(ItemID)));
				// DataReferenceIndex
				writer.Write(((ushort)(DataReferenceIndex)));
				if (Owner.BaseOffsetSize == 4)
				{
					// BaseOffset
					writer.Write(((uint)(BaseOffset)));
				}
				else
				{
					if (Owner.BaseOffsetSize == 8)
					{
						// BaseOffset
						writer.Write(((long)(BaseOffset)));
					}
				}
				writer.Write(((ushort)(extentEntries.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(extentEntries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((ItemExtentEntry)(enumerator.Current));
					// extentEntries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class ItemLocationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				// sizeData
				sizeData = ((ushort)(reader.ReadUInt16()));
				locationEntries.Clear();
				count = ((int)(reader.ReadUInt16()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// locationEntries
					var item = new ItemLocationEntry();
					locationEntries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// sizeData
					long size = (base.DataSize + 2);
					size += 2;
					for (var enumerator = ((System.Collections.IEnumerable)(locationEntries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((ItemLocationEntry)(enumerator.Current));
						// locationEntries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// sizeData
				writer.Write(((ushort)(sizeData)));
				writer.Write(((ushort)(locationEntries.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(locationEntries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((ItemLocationEntry)(enumerator.Current));
					// locationEntries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class PrimaryItemBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// ItemID
				ItemID = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// ItemID
					long size = (base.DataSize + 2);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// ItemID
				writer.Write(((ushort)(ItemID)));
			}
		}
		
		public partial class ItemProtectionBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// entryArray
				Read_entryArray(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// entryArray
					size += Size_entryArray();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// entryArray
				Write_entryArray(writer);
			}
		}
		
		public partial class ItemInfoEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// ItemID
				ItemID = ((ushort)(reader.ReadUInt16()));
				// ItemProtectionIndex
				ItemProtectionIndex = ((ushort)(reader.ReadUInt16()));
				// ItemName
				ItemName = ((string)(encoder.ReadString()));
				// ContentType
				ContentType = ((string)(encoder.ReadString()));
				// ContentEncoding
				ContentEncoding = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// ItemID+ItemProtectionIndex
					long size = (base.DataSize 
								+ (2 + 2));
					// ItemName
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ItemName)) ?? "");
					size += encoder.BaseStream.Position;
					// ContentType
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ContentType)) ?? "");
					size += encoder.BaseStream.Position;
					// ContentEncoding
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ContentEncoding)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// ItemID
				writer.Write(((ushort)(ItemID)));
				// ItemProtectionIndex
				writer.Write(((ushort)(ItemProtectionIndex)));
				// ItemName
				encoder.Write(((string)(ItemName)) ?? "");
				// ContentType
				encoder.Write(((string)(ContentType)) ?? "");
				// ContentEncoding
				encoder.Write(((string)(ContentEncoding)) ?? "");
			}
		}
		
		public partial class ItemInfoBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// entryArray
				Read_entryArray(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// entryArray
					size += Size_entryArray();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// entryArray
				Write_entryArray(writer);
			}
		}
		
		public partial class OriginalFormatBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// DataFormat
				DataFormat = ((AtomicCode)(reader.ReadUInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// DataFormat
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// DataFormat
				writer.Write(((uint)(DataFormat)));
			}
		}
		
		public partial class SchemeTypeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// SchemeType
				SchemeType = ((AtomicCode)(reader.ReadUInt32()));
				// SchemeVersion
				SchemeVersion = ((int)(reader.ReadInt32()));
				// URI
				URI = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// SchemeType+SchemeVersion
					long size = (base.DataSize 
								+ (4 + 4));
					// URI
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(URI)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// SchemeType
				writer.Write(((uint)(SchemeType)));
				// SchemeVersion
				writer.Write(((int)(SchemeVersion)));
				// URI
				encoder.Write(((string)(URI)) ?? "");
			}
		}
		
		public partial class ISMAKMSBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// URI
				URI = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					long size = base.DataSize;
					// URI
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(URI)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// URI
				encoder.Write(((string)(URI)) ?? "");
			}
		}
		
		public partial class ISMASampleFormatBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// SelectiveEncryption
				SelectiveEncryption = ((byte)(reader.ReadByte()));
				// KeyIndicatorLength
				KeyIndicatorLength = ((byte)(reader.ReadByte()));
				// IVLength
				IVLength = ((byte)(reader.ReadByte()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// SelectiveEncryption+KeyIndicatorLength+IVLength
					long size = (base.DataSize 
								+ ((1 + 1) 
								+ 1));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// SelectiveEncryption
				writer.Write(((byte)(SelectiveEncryption)));
				// KeyIndicatorLength
				writer.Write(((byte)(KeyIndicatorLength)));
				// IVLength
				writer.Write(((byte)(IVLength)));
			}
		}
		
		public partial class SchemeInformationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class ProtectionInfoBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class MetaBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				ReadFullBox(reader);
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += base.DataSize + Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class MovieExtendsHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				if (Version == 1)
				{
					// FragmentDuration
					FragmentDuration = ((long)(reader.ReadInt64()));
				}
				else
				{
					// FragmentDuration
					FragmentDuration = ((long)(reader.ReadUInt32()));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					ResolveVersion(FragmentDuration);
					long size = base.DataSize;
					if (Version == 1)
					{
						// FragmentDuration
						size += 8;
					}
					else
					{
						// FragmentDuration
						size += 4;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if (Version == 1)
				{
					// FragmentDuration
					writer.Write(((long)(FragmentDuration)));
				}
				else
				{
					// FragmentDuration
					writer.Write(((uint)(FragmentDuration)));
				}
			}
		}
		
		public partial class MovieExtendsBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class TrackExtendsBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// TrackID
				TrackID = ((int)(reader.ReadInt32()));
				// SampleDescriptionIndex
				SampleDescriptionIndex = ((int)(reader.ReadInt32()));
				// SampleDuration
				SampleDuration = ((int)(reader.ReadInt32()));
				// SampleSize
				SampleSize = ((int)(reader.ReadInt32()));
				// DefaultSampleFlags
				DefaultSampleFlags = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// TrackID+SampleDescriptionIndex+SampleDuration+SampleSize+DefaultSampleFlags
					long size = (base.DataSize 
								+ ((((4 + 4) 
								+ 4) 
								+ 4) 
								+ 4));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// TrackID
				writer.Write(((int)(TrackID)));
				// SampleDescriptionIndex
				writer.Write(((int)(SampleDescriptionIndex)));
				// SampleDuration
				writer.Write(((int)(SampleDuration)));
				// SampleSize
				writer.Write(((int)(SampleSize)));
				// DefaultSampleFlags
				writer.Write(((int)(DefaultSampleFlags)));
			}
		}
		
		public partial class MovieFragmentHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// SequenceNumber
				SequenceNumber = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// SequenceNumber
					long size = (base.DataSize + 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// SequenceNumber
				writer.Write(((int)(SequenceNumber)));
			}
		}
		
		public partial class MovieFragmentBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class TrackFragmentHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// TrackID
				TrackID = ((int)(reader.ReadInt32()));
				if ((TrackFragmentFlags & TrackFragmentFlags.BaseOffset) != 0)
				{
					// BaseDataOffset
					BaseDataOffset = ((long)(reader.ReadInt64()));
				}
				if ((TrackFragmentFlags & TrackFragmentFlags.SampleDesc) != 0)
				{
					// SampleDescriptionIndex
					SampleDescriptionIndex = ((int)(reader.ReadInt32()));
				}
				if ((TrackFragmentFlags & TrackFragmentFlags.SampleDur) != 0)
				{
					// SampleDuration
					SampleDuration = ((int)(reader.ReadInt32()));
				}
				if ((TrackFragmentFlags & TrackFragmentFlags.SampleSize) != 0)
				{
					// SampleSize
					SampleSize = ((int)(reader.ReadInt32()));
				}
				if ((TrackFragmentFlags & TrackFragmentFlags.SampleFlags) != 0)
				{
					// DefaultSampleFlags
					DefaultSampleFlags = ((int)(reader.ReadInt32()));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// TrackID
					long size = (base.DataSize + 4);
					if ((TrackFragmentFlags & TrackFragmentFlags.BaseOffset) != 0)
					{
						// BaseDataOffset
						size += 8;
					}
					if ((TrackFragmentFlags & TrackFragmentFlags.SampleDesc) != 0)
					{
						// SampleDescriptionIndex
						size += 4;
					}
					if ((TrackFragmentFlags & TrackFragmentFlags.SampleDur) != 0)
					{
						// SampleDuration
						size += 4;
					}
					if ((TrackFragmentFlags & TrackFragmentFlags.SampleSize) != 0)
					{
						// SampleSize
						size += 4;
					}
					if ((TrackFragmentFlags & TrackFragmentFlags.SampleFlags) != 0)
					{
						// DefaultSampleFlags
						size += 4;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// TrackID
				writer.Write(((int)(TrackID)));
				if ((TrackFragmentFlags & TrackFragmentFlags.BaseOffset) != 0)
				{
					// BaseDataOffset
					writer.Write(((long)(BaseDataOffset)));
				}
				if ((TrackFragmentFlags & TrackFragmentFlags.SampleDesc) != 0)
				{
					// SampleDescriptionIndex
					writer.Write(((int)(SampleDescriptionIndex)));
				}
				if ((TrackFragmentFlags & TrackFragmentFlags.SampleDur) != 0)
				{
					// SampleDuration
					writer.Write(((int)(SampleDuration)));
				}
				if ((TrackFragmentFlags & TrackFragmentFlags.SampleSize) != 0)
				{
					// SampleSize
					writer.Write(((int)(SampleSize)));
				}
				if ((TrackFragmentFlags & TrackFragmentFlags.SampleFlags) != 0)
				{
					// DefaultSampleFlags
					writer.Write(((int)(DefaultSampleFlags)));
				}
			}
		}
		
		public partial class TFBaseMediaDecodeTimeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				if (Version == 1)
				{
					// BaseMediaDecodeTime
					BaseMediaDecodeTime = ((long)(reader.ReadInt64()));
				}
				else
				{
					// BaseMediaDecodeTime
					BaseMediaDecodeTime = ((long)(reader.ReadUInt32()));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					ResolveVersion(BaseMediaDecodeTime);
					long size = base.DataSize;
					if (Version == 1)
					{
						// BaseMediaDecodeTime
						size += 8;
					}
					else
					{
						// BaseMediaDecodeTime
						size += 4;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				if (Version == 1)
				{
					// BaseMediaDecodeTime
					writer.Write(((long)(BaseMediaDecodeTime)));
				}
				else
				{
					// BaseMediaDecodeTime
					writer.Write(((uint)(BaseMediaDecodeTime)));
				}
			}
		}
		
		public partial class TrackFragmentBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class TrackFragmentRunBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				// SampleCount
				int sampleCount = reader.ReadInt32();
				if ((TrackRunFlags & TrackRunFlags.DataOffset) != 0)
				{
					// DataOffset
					DataOffset = ((int)(reader.ReadInt32()));
				}
				if ((TrackRunFlags & TrackRunFlags.FirstFlag) != 0)
				{
					// FirstSampleFlags
					FirstSampleFlags = ((int)(reader.ReadInt32()));
				}
				entries.Clear();
				count = ((int)(sampleCount));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// entries
					var item = new TrunEntry();
					entries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// SampleCount
					size += 4;
					if ((TrackRunFlags & TrackRunFlags.DataOffset) != 0)
					{
						// DataOffset
						size += 4;
					}
					if ((TrackRunFlags & TrackRunFlags.FirstFlag) != 0)
					{
						// FirstSampleFlags
						size += 4;
					}
					for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((TrunEntry)(enumerator.Current));
						// entries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// SampleCount
				writer.Write((int)entries.Count);
				if ((TrackRunFlags & TrackRunFlags.DataOffset) != 0)
				{
					// DataOffset
					writer.Write(((int)(DataOffset)));
				}
				if ((TrackRunFlags & TrackRunFlags.FirstFlag) != 0)
				{
					// FirstSampleFlags
					writer.Write(((int)(FirstSampleFlags)));
				}
				for (var enumerator = ((System.Collections.IEnumerable)(entries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((TrunEntry)(enumerator.Current));
					// entries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class TrunEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				if ((Owner.TrackRunFlags & TrackRunFlags.Duration) != 0)
				{
					// Duration
					Duration = ((int)(reader.ReadInt32()));
				}
				if ((Owner.TrackRunFlags & TrackRunFlags.Size) != 0)
				{
					// Size
					Size = ((int)(reader.ReadInt32()));
				}
				if ((Owner.TrackRunFlags & TrackRunFlags.Flags) != 0)
				{
					// Flags
					Flags = ((int)(reader.ReadInt32()));
				}
				if ((Owner.TrackRunFlags & TrackRunFlags.CTSOffset) != 0)
				{
					// CTSOffset
					CTSOffset = ((int)(reader.ReadInt32()));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					long size = 0;
					if ((Owner.TrackRunFlags & TrackRunFlags.Duration) != 0)
					{
						// Duration
						size += 4;
					}
					if ((Owner.TrackRunFlags & TrackRunFlags.Size) != 0)
					{
						// Size
						size += 4;
					}
					if ((Owner.TrackRunFlags & TrackRunFlags.Flags) != 0)
					{
						// Flags
						size += 4;
					}
					if ((Owner.TrackRunFlags & TrackRunFlags.CTSOffset) != 0)
					{
						// CTSOffset
						size += 4;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				if ((Owner.TrackRunFlags & TrackRunFlags.Duration) != 0)
				{
					// Duration
					writer.Write(((int)(Duration)));
				}
				if ((Owner.TrackRunFlags & TrackRunFlags.Size) != 0)
				{
					// Size
					writer.Write(((int)(Size)));
				}
				if ((Owner.TrackRunFlags & TrackRunFlags.Flags) != 0)
				{
					// Flags
					writer.Write(((int)(Flags)));
				}
				if ((Owner.TrackRunFlags & TrackRunFlags.CTSOffset) != 0)
				{
					// CTSOffset
					writer.Write(((int)(CTSOffset)));
				}
			}
		}
		
		public partial class SegmentTypeBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				int count;
				// MajorBrand
				MajorBrand = ((int)(reader.ReadInt32()));
				// MinorVersion
				MinorVersion = ((int)(reader.ReadInt32()));
				// AltCount
				AltCount = ((int)(reader.ReadInt32()));
				if (true)
				{
					count = ((int)(reader.ReadByte()));
					var buffer = new int[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// AltBrand
						buffer[index] = ((int)(reader.ReadInt32()));
					}
					AltBrand = ((int[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// MajorBrand+MinorVersion+AltCount
					long size = ((4 + 4) 
								+ 4);
					// AltBrand
					if ((AltBrand != null))
					{
						var buffer = ((int[])(AltBrand));
						size += (buffer.Length * 4);
					}
					size += 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// MajorBrand
				writer.Write(((int)(MajorBrand)));
				// MinorVersion
				writer.Write(((int)(MinorVersion)));
				// AltCount
				writer.Write(((int)(AltCount)));
				if ((AltBrand != null))
				{
					var buffer = ((int[])(AltBrand));
					writer.Write(((byte)(buffer.Length)));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// AltBrand
						writer.Write(((int)(buffer[index])));
					}
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class HintSampleEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// HintTrackVersion
				HintTrackVersion = ((ushort)(reader.ReadUInt16()));
				// LastCompatibleVersion
				LastCompatibleVersion = ((ushort)(reader.ReadUInt16()));
				// MaxPacketSize
				MaxPacketSize = ((int)(reader.ReadInt32()));
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// HintTrackVersion+LastCompatibleVersion+MaxPacketSize
					long size = (base.DataSize 
								+ ((2 + 2) 
								+ 4));
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// HintTrackVersion
				writer.Write(((ushort)(HintTrackVersion)));
				// LastCompatibleVersion
				writer.Write(((ushort)(LastCompatibleVersion)));
				// MaxPacketSize
				writer.Write(((int)(MaxPacketSize)));
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class RTPBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// SubType
				SubType = ((AtomicCode)(reader.ReadUInt32()));
				// SDPText
				SDPText = new string(encoder.ReadChars(((int)(reader.Length()))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					// SubType
					long size = 4;
					// SDPText
					if ((SDPText != null))
					{
						size += encoding.GetByteCount(SDPText.ToCharArray());
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// SubType
				writer.Write(((uint)(SubType)));
				// SDPText
				if ((SDPText != null))
				{
					encoder.Write(SDPText.ToCharArray());
				}
			}
		}
		
		public partial class SDPBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// SDPText
				SDPText = new string(encoder.ReadChars(((int)(reader.Length()))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					long size = 0;
					// SDPText
					if ((SDPText != null))
					{
						size += encoding.GetByteCount(SDPText.ToCharArray());
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// SDPText
				if ((SDPText != null))
				{
					encoder.Write(SDPText.ToCharArray());
				}
			}
		}
		
		public partial class RTPOBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// TimeOffset
				TimeOffset = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// TimeOffset
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// TimeOffset
				writer.Write(((int)(TimeOffset)));
			}
		}
		
		public partial class HintTrackInfoBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class RelyHintBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// data
				data = ((byte)(reader.ReadByte()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// data
					long size = 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// data
				writer.Write(((byte)(data)));
			}
		}
		
		public partial class TSHintEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// TimeScale
				TimeScale = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// TimeScale
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// TimeScale
				writer.Write(((int)(TimeScale)));
			}
		}
		
		public partial class TimeOffHintEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// TimeOffset
				TimeOffset = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// TimeOffset
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// TimeOffset
				writer.Write(((int)(TimeOffset)));
			}
		}
		
		public partial class SeqOffHintEntryBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// SeqOffset
				SeqOffset = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// SeqOffset
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// SeqOffset
				writer.Write(((int)(SeqOffset)));
			}
		}
		
		public partial class TRPYBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// RTPBytesSent
				RTPBytesSent = ((long)(reader.ReadInt64()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// RTPBytesSent
					long size = 8;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// RTPBytesSent
				writer.Write(((long)(RTPBytesSent)));
			}
		}
		
		public partial class TOTLBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// RTPBytesSent
				RTPBytesSent = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// RTPBytesSent
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// RTPBytesSent
				writer.Write(((int)(RTPBytesSent)));
			}
		}
		
		public partial class NUMPBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// PacketsSent
				PacketsSent = ((long)(reader.ReadInt64()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// PacketsSent
					long size = 8;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// PacketsSent
				writer.Write(((long)(PacketsSent)));
			}
		}
		
		public partial class NPCKBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// PacketsSent
				PacketsSent = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// PacketsSent
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// PacketsSent
				writer.Write(((int)(PacketsSent)));
			}
		}
		
		public partial class NTYLBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// BytesSent
				BytesSent = ((long)(reader.ReadInt64()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// BytesSent
					long size = 8;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// BytesSent
				writer.Write(((long)(BytesSent)));
			}
		}
		
		public partial class TPAYBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// BytesSent
				BytesSent = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// BytesSent
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// BytesSent
				writer.Write(((int)(BytesSent)));
			}
		}
		
		public partial class MAXRBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// Granularity
				Granularity = ((int)(reader.ReadInt32()));
				// MaxDataRate
				MaxDataRate = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// Granularity+MaxDataRate
					long size = (4 + 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Granularity
				writer.Write(((int)(Granularity)));
				// MaxDataRate
				writer.Write(((int)(MaxDataRate)));
			}
		}
		
		public partial class DMEDBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// BytesSent
				BytesSent = ((long)(reader.ReadInt64()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// BytesSent
					long size = 8;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// BytesSent
				writer.Write(((long)(BytesSent)));
			}
		}
		
		public partial class DIMMBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// BytesSent
				BytesSent = ((long)(reader.ReadInt64()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// BytesSent
					long size = 8;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// BytesSent
				writer.Write(((long)(BytesSent)));
			}
		}
		
		public partial class DREPBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// RepeatedBytes
				RepeatedBytes = ((long)(reader.ReadInt64()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// RepeatedBytes
					long size = 8;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// RepeatedBytes
				writer.Write(((long)(RepeatedBytes)));
			}
		}
		
		public partial class TMINBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// MinimumTransmitTime
				MinimumTransmitTime = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// MinimumTransmitTime
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// MinimumTransmitTime
				writer.Write(((int)(MinimumTransmitTime)));
			}
		}
		
		public partial class TMAXBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// MaximumTransmitTime
				MaximumTransmitTime = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// MaximumTransmitTime
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// MaximumTransmitTime
				writer.Write(((int)(MaximumTransmitTime)));
			}
		}
		
		public partial class PMAXBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// MaximumSize
				MaximumSize = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// MaximumSize
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// MaximumSize
				writer.Write(((int)(MaximumSize)));
			}
		}
		
		public partial class DMAXBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// MaximumDuration
				MaximumDuration = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// MaximumDuration
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// MaximumDuration
				writer.Write(((int)(MaximumDuration)));
			}
		}
		
		public partial class PAYTBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// PayloadCode
				PayloadCode = ((int)(reader.ReadInt32()));
				// PayloadString
				PayloadString = new string(encoder.ReadChars(((int)(reader.ReadByte()))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					// PayloadCode
					long size = 4;
					// PayloadString
					if ((PayloadString != null))
					{
						size += encoding.GetByteCount(PayloadString.ToCharArray());
					}
					size += 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// PayloadCode
				writer.Write(((int)(PayloadCode)));
				// PayloadString
				if ((PayloadString != null))
				{
					writer.Write(((byte)(encoding.GetByteCount(PayloadString))));
					encoder.Write(PayloadString.ToCharArray());
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class NameBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// String
				String = ((string)(encoder.ReadString()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					long size = 0;
					// String
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(String)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// String
				encoder.Write(((string)(String)) ?? "");
			}
		}
		
		public partial class HintInfoBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class DataBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// Reserved
				Reserved = ((int)(reader.ReadInt32()));
				// Data
				Data = ((string)(encoder.ReadString()));
				// Size
				Size = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// Reserved+Size
					long size = (base.DataSize 
								+ (4 + 4));
					// Data
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(Data)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// Reserved
				writer.Write(((int)(Reserved)));
				// Data
				encoder.Write(((string)(Data)) ?? "");
				// Size
				writer.Write(((int)(Size)));
			}
		}
		
		public partial class ListItemBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class ItemListBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class OMADRMCommonHeaderBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				int count;
				// EncryptionMethod
				EncryptionMethod = ((byte)(reader.ReadByte()));
				// PaddingScheme
				PaddingScheme = ((byte)(reader.ReadByte()));
				// PlainTextLength
				PlainTextLength = ((long)(reader.ReadInt64()));
				// ContentID
				ContentID = ((string)(encoder.ReadString()));
				// RightsIssuerURL
				RightsIssuerURL = ((string)(encoder.ReadString()));
				if (true)
				{
					count = ((int)(reader.ReadByte()));
					var buffer = new string[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// TextualHeaders
						buffer[index] = ((string)(encoder.ReadString()));
					}
					TextualHeaders = ((string[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// EncryptionMethod+PaddingScheme+PlainTextLength
					long size = (base.DataSize 
								+ ((1 + 1) 
								+ 8));
					// ContentID
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ContentID)) ?? "");
					size += encoder.BaseStream.Position;
					// RightsIssuerURL
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(RightsIssuerURL)) ?? "");
					size += encoder.BaseStream.Position;
					size += 1;
					if ((TextualHeaders != null))
					{
						var buffer = ((string[])(TextualHeaders));
						for (int index = 0; (index < buffer.Length); index = (index + 1))
						{
							// TextualHeaders
							size -= encoder.BaseStream.Position;
							encoder.Write(((string)(buffer[index])) ?? "");
							size += encoder.BaseStream.Position;
						}
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// EncryptionMethod
				writer.Write(((byte)(EncryptionMethod)));
				// PaddingScheme
				writer.Write(((byte)(PaddingScheme)));
				// PlainTextLength
				writer.Write(((long)(PlainTextLength)));
				// ContentID
				encoder.Write(((string)(ContentID)) ?? "");
				// RightsIssuerURL
				encoder.Write(((string)(RightsIssuerURL)) ?? "");
				if ((TextualHeaders != null))
				{
					var buffer = ((string[])(TextualHeaders));
					writer.Write(((byte)(buffer.Length)));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// TextualHeaders
						encoder.Write(((string)(buffer[index])) ?? "");
					}
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class OMADRMGroupIDBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// GKEncryptionMethod
				GKEncryptionMethod = ((byte)(reader.ReadByte()));
				// GroupID
				GroupID = ((string)(encoder.ReadString()));
				// GroupKey
				GroupKey = ((byte[])(reader.ReadBytes(((int)(reader.ReadByte())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// GKEncryptionMethod
					long size = (base.DataSize + 1);
					// GroupID
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(GroupID)) ?? "");
					size += encoder.BaseStream.Position;
					// GroupKey
					if ((GroupKey != null))
					{
						size += ((byte[])(GroupKey)).Length;
					}
					size += 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// GKEncryptionMethod
				writer.Write(((byte)(GKEncryptionMethod)));
				// GroupID
				encoder.Write(((string)(GroupID)) ?? "");
				// GroupKey
				if ((GroupKey != null))
				{
					writer.Write(((byte)(((byte[])(GroupKey)).Length)));
					writer.Write(((byte[])(GroupKey)));
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class OMADRMMutableInformationBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				// boxList
				Read_boxList(reader);
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// boxList
					size += Size_boxList();
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				// boxList
				Write_boxList(writer);
			}
		}
		
		public partial class OMADRMTransactionTrackingBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// TransactionID
				TransactionID = ((byte[])(reader.ReadBytes(((int)(reader.ReadByte())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// TransactionID
					if ((TransactionID != null))
					{
						size += ((byte[])(TransactionID)).Length;
					}
					size += 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// TransactionID
				if ((TransactionID != null))
				{
					writer.Write(((byte)(((byte[])(TransactionID)).Length)));
					writer.Write(((byte[])(TransactionID)));
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class OMADRMRightsObjectBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// OMARightsObject
				OMARightsObject = ((byte[])(reader.ReadBytes(((int)(reader.ReadByte())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// OMARightsObject
					if ((OMARightsObject != null))
					{
						size += ((byte[])(OMARightsObject)).Length;
					}
					size += 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// OMARightsObject
				if ((OMARightsObject != null))
				{
					writer.Write(((byte)(((byte[])(OMARightsObject)).Length)));
					writer.Write(((byte[])(OMARightsObject)));
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class SIDXReference : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				// referenceData
				referenceData = ((uint)(reader.ReadUInt32()));
				// SubsegmentDuration
				SubsegmentDuration = ((int)(reader.ReadInt32()));
				// sapData
				sapData = ((uint)(reader.ReadUInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// referenceData+SubsegmentDuration+sapData
					long size = ((4 + 4) 
								+ 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// referenceData
				writer.Write(((uint)(referenceData)));
				// SubsegmentDuration
				writer.Write(((int)(SubsegmentDuration)));
				// sapData
				writer.Write(((uint)(sapData)));
			}
		}
		
		public partial class SegmentIndexBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				// ReferenceID
				ReferenceID = ((int)(reader.ReadInt32()));
				// TimeScale
				TimeScale = ((int)(reader.ReadInt32()));
				if (Version == 0)
				{
					// EarliestPresentationTime
					EarliestPresentationTime = ((long)(reader.ReadUInt32()));
				}
				else
				{
					// EarliestPresentationTime
					EarliestPresentationTime = ((long)(reader.ReadInt64()));
				}
				if (Version == 0)
				{
					// FirstOffset
					FirstOffset = ((long)(reader.ReadUInt32()));
				}
				else
				{
					// FirstOffset
					FirstOffset = ((long)(reader.ReadInt64()));
				}
				// Reserved
				Reserved = ((ushort)(reader.ReadUInt16()));
				Refs.Clear();
				count = ((int)(reader.ReadUInt16()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// Refs
					var item = new SIDXReference();
					Refs.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// ReferenceID+TimeScale+Reserved
					long size = (base.DataSize 
								+ ((4 + 4) 
								+ 2));
					if (Version == 0)
					{
						// EarliestPresentationTime
						size += 4;
					}
					else
					{
						// EarliestPresentationTime
						size += 8;
					}
					if (Version == 0)
					{
						// FirstOffset
						size += 4;
					}
					else
					{
						// FirstOffset
						size += 8;
					}
					size += 2;
					for (var enumerator = ((System.Collections.IEnumerable)(Refs)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((SIDXReference)(enumerator.Current));
						// Refs
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// ReferenceID
				writer.Write(((int)(ReferenceID)));
				// TimeScale
				writer.Write(((int)(TimeScale)));
				if (Version == 0)
				{
					// EarliestPresentationTime
					writer.Write(((uint)(EarliestPresentationTime)));
				}
				else
				{
					// EarliestPresentationTime
					writer.Write(((long)(EarliestPresentationTime)));
				}
				if (Version == 0)
				{
					// FirstOffset
					writer.Write(((uint)(FirstOffset)));
				}
				else
				{
					// FirstOffset
					writer.Write(((long)(FirstOffset)));
				}
				// Reserved
				writer.Write(((ushort)(Reserved)));
				writer.Write(((ushort)(Refs.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(Refs)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((SIDXReference)(enumerator.Current));
					// Refs
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class PcrInfoBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				int count;
				if (true)
				{
					count = ((int)(reader.ReadInt32()));
					var buffer = new ulong[count];
					for (int index = 0; (index < count); index = (index + 1))
					{
						// pcrValues
						buffer[index] = ((ulong)(reader.ReadUInt64()));
					}
					pcrValues = ((ulong[])(buffer));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = 0;
					// pcrValues
					if ((pcrValues != null))
					{
						var buffer = ((ulong[])(pcrValues));
						size += (buffer.Length * 8);
					}
					size += 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				if ((pcrValues != null))
				{
					var buffer = ((ulong[])(pcrValues));
					writer.Write(((int)(buffer.Length)));
					for (int index = 0; (index < buffer.Length); index = (index + 1))
					{
						// pcrValues
						writer.Write(((ulong)(buffer[index])));
					}
				}
				else
				{
					writer.Write(((int)(0)));
				}
			}
		}
		
		public partial class SampleGroupEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				// SampleCount
				SampleCount = ((int)(reader.ReadInt32()));
				// GroupDescriptionIndex
				GroupDescriptionIndex = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					// SampleCount+GroupDescriptionIndex
					long size = (4 + 4);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				// SampleCount
				writer.Write(((int)(SampleCount)));
				// GroupDescriptionIndex
				writer.Write(((int)(GroupDescriptionIndex)));
			}
		}
		
		public partial class SampleGroupBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				// GroupingType
				GroupingType = ((AtomicCode)(reader.ReadUInt32()));
				if (Version == 1)
				{
					// GroupingTypeParameter
					GroupingTypeParameter = ((int)(reader.ReadInt32()));
				}
				sampleEntries.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// sampleEntries
					var item = new SampleGroupEntry();
					sampleEntries.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// GroupingType
					long size = (base.DataSize + 4);
					if (Version == 1)
					{
						// GroupingTypeParameter
						size += 4;
					}
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(sampleEntries)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((SampleGroupEntry)(enumerator.Current));
						// sampleEntries
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// GroupingType
				writer.Write(((uint)(GroupingType)));
				if (Version == 1)
				{
					// GroupingTypeParameter
					writer.Write(((int)(GroupingTypeParameter)));
				}
				writer.Write(((int)(sampleEntries.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(sampleEntries)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((SampleGroupEntry)(enumerator.Current));
					// sampleEntries
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class SampleGroupDescriptionBox
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				int count;
				// GroupingType
				GroupingType = ((AtomicCode)(reader.ReadUInt32()));
				if (Version == 1)
				{
					// DefaultLength
					DefaultLength = ((int)(reader.ReadInt32()));
				}
				groupDescriptions.Clear();
				count = ((int)(reader.ReadInt32()));
				for (int index = 0; (index < count); index = (index + 1))
				{
					// groupDescriptions
					var item = ResolveGroupDescription();
					groupDescriptions.Add(item);
					item.ReadBinary(reader);
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// GroupingType
					long size = (base.DataSize + 4);
					if (Version == 1)
					{
						// DefaultLength
						size += 4;
					}
					size += 4;
					for (var enumerator = ((System.Collections.IEnumerable)(groupDescriptions)).GetEnumerator(); enumerator.MoveNext(); )
					{
						var item = ((SampleGroupDescriptionEntry)(enumerator.Current));
						// groupDescriptions
						size += item.DataSize;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// GroupingType
				writer.Write(((uint)(GroupingType)));
				if (Version == 1)
				{
					// DefaultLength
					writer.Write(((int)(DefaultLength)));
				}
				writer.Write(((int)(groupDescriptions.Count)));
				for (var enumerator = ((System.Collections.IEnumerable)(groupDescriptions)).GetEnumerator(); enumerator.MoveNext(); )
				{
					var item = ((SampleGroupDescriptionEntry)(enumerator.Current));
					// groupDescriptions
					item.WriteBinary(writer);
				}
			}
		}
		
		public partial class SampleGroupDescriptionEntry
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual void ReadBinary(System.IO.BinaryReader reader)
			{
				if (Owner.Version == 1 && Owner.DefaultLength == 0)
				{
					// Length
					Length = ((int)(reader.ReadInt32()));
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual long DataSize
			{
				get
				{
					long size = 0;
					if (Owner.Version == 1 && Owner.DefaultLength == 0)
					{
						// Length
						size += 4;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual void WriteBinary(System.IO.BinaryWriter writer)
			{
				if (Owner.Version == 1 && Owner.DefaultLength == 0)
				{
					// Length
					writer.Write(((int)(Length)));
				}
			}
		}
		
		public partial class DefaultSampleGroupDescriptionEntry
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(Length)))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					long size = base.DataSize;
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// Data
				if ((Data != null))
				{
					writer.Write(((byte[])(Data)));
				}
			}
		}
		
		public partial class VisualRandomAccessEntry
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// data
				data = ((byte)(reader.ReadByte()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// data
					long size = (base.DataSize + 1);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// data
				writer.Write(((byte)(data)));
			}
		}
		
		public partial class RollRecoveryEntry
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// RollDistance
				RollDistance = ((short)(reader.ReadInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// RollDistance
					long size = (base.DataSize + 2);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// RollDistance
				writer.Write(((short)(RollDistance)));
			}
		}
		
		public partial class ISOMBaseDataHandler : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual void ReadBinary(System.IO.BinaryReader reader)
			{
				// Type
				Type = ((byte)(reader.ReadByte()));
				// CurPos
				CurPos = ((long)(reader.ReadInt64()));
				// Mode
				Mode = ((byte)(reader.ReadByte()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual long DataSize
			{
				get
				{
					// Type+CurPos+Mode
					long size = ((1 + 8) 
								+ 1);
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Type
				writer.Write(((byte)(Type)));
				// CurPos
				writer.Write(((long)(CurPos)));
				// Mode
				writer.Write(((byte)(Mode)));
			}
		}
		
		public partial class FileMappingDataMap
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// Name
				Name = ((string)(encoder.ReadString()));
				// FileSize
				FileSize = ((long)(reader.ReadInt64()));
				// ByteMap
				ByteMap = ((string)(encoder.ReadString()));
				// BytePos
				BytePos = ((long)(reader.ReadInt64()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// FileSize+BytePos
					long size = (base.DataSize 
								+ (8 + 8));
					// Name
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(Name)) ?? "");
					size += encoder.BaseStream.Position;
					// ByteMap
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(ByteMap)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// Name
				encoder.Write(((string)(Name)) ?? "");
				// FileSize
				writer.Write(((long)(FileSize)));
				// ByteMap
				encoder.Write(((string)(ByteMap)) ?? "");
				// BytePos
				writer.Write(((long)(BytePos)));
			}
		}
		
		public partial class ISMOBaseDTEEntry : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual void ReadBinary(System.IO.BinaryReader reader)
			{
				// Source
				Source = ((byte)(reader.ReadByte()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual long DataSize
			{
				get
				{
					// Source
					long size = 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual void WriteBinary(System.IO.BinaryWriter writer)
			{
				// Source
				writer.Write(((byte)(Source)));
			}
		}
		
		public partial class ImmediateDTE
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// DataLength
				DataLength = ((byte)(reader.ReadByte()));
				// Data
				Data = ((byte[])(reader.ReadBytes(((int)(reader.ReadByte())))));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// DataLength
					long size = (base.DataSize + 1);
					// Data
					if ((Data != null))
					{
						size += ((byte[])(Data)).Length;
					}
					size += 1;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// DataLength
				writer.Write(((byte)(DataLength)));
				// Data
				if ((Data != null))
				{
					writer.Write(((byte)(((byte[])(Data)).Length)));
					writer.Write(((byte[])(Data)));
				}
				else
				{
					writer.Write(((byte)(0)));
				}
			}
		}
		
		public partial class SampleDTE
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// TrackRefIndex
				TrackRefIndex = ((sbyte)(reader.ReadSByte()));
				// SampleNumber
				SampleNumber = ((int)(reader.ReadInt32()));
				// DataLength
				DataLength = ((ushort)(reader.ReadUInt16()));
				// ByteOffset
				ByteOffset = ((int)(reader.ReadInt32()));
				// BytesPerComp
				BytesPerComp = ((ushort)(reader.ReadUInt16()));
				// SamplesPerComp
				SamplesPerComp = ((ushort)(reader.ReadUInt16()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// TrackRefIndex+SampleNumber+DataLength+ByteOffset+BytesPerComp+SamplesPerComp
					long size = (base.DataSize 
								+ (((((1 + 4) 
								+ 2) 
								+ 4) 
								+ 2) 
								+ 2));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// TrackRefIndex
				writer.Write(((sbyte)(TrackRefIndex)));
				// SampleNumber
				writer.Write(((int)(SampleNumber)));
				// DataLength
				writer.Write(((ushort)(DataLength)));
				// ByteOffset
				writer.Write(((int)(ByteOffset)));
				// BytesPerComp
				writer.Write(((ushort)(BytesPerComp)));
				// SamplesPerComp
				writer.Write(((ushort)(SamplesPerComp)));
			}
		}
		
		public partial class StreamDescDTE
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// trackRefIndex
				trackRefIndex = ((sbyte)(reader.ReadSByte()));
				// StreamDescIndex
				StreamDescIndex = ((int)(reader.ReadInt32()));
				// DataLength
				DataLength = ((ushort)(reader.ReadUInt16()));
				// ByteOffset
				ByteOffset = ((int)(reader.ReadInt32()));
				// Reserved
				Reserved = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// trackRefIndex+StreamDescIndex+DataLength+ByteOffset+Reserved
					long size = (base.DataSize 
								+ ((((1 + 4) 
								+ 2) 
								+ 4) 
								+ 4));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// trackRefIndex
				writer.Write(((sbyte)(trackRefIndex)));
				// StreamDescIndex
				writer.Write(((int)(StreamDescIndex)));
				// DataLength
				writer.Write(((ushort)(DataLength)));
				// ByteOffset
				writer.Write(((int)(ByteOffset)));
				// Reserved
				writer.Write(((int)(Reserved)));
			}
		}
		
		public partial class HintSample : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void ReadBinary(System.IO.BinaryReader reader)
			{
				var encoder = new BinStringReader(reader.BaseStream, System.Text.Encoding.UTF8);
				// HintType
				HintType = ((byte)(reader.ReadByte()));
				// Reserved
				Reserved = ((ushort)(reader.ReadUInt16()));
				// AdditionalData
				AdditionalData = ((string)(encoder.ReadString()));
				// DataLength
				DataLength = ((int)(reader.ReadInt32()));
				// TransmissionTime
				TransmissionTime = ((long)(reader.ReadInt64()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public long DataSize
			{
				get
				{
					var encoding = System.Text.Encoding.UTF8;
					var encoder = new BinStringWriter(new System.IO.MemoryStream(), encoding);
					// HintType+Reserved+DataLength+TransmissionTime
					long size = (((1 + 2) 
								+ 4) 
								+ 8);
					// AdditionalData
					size -= encoder.BaseStream.Position;
					encoder.Write(((string)(AdditionalData)) ?? "");
					size += encoder.BaseStream.Position;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public void WriteBinary(System.IO.BinaryWriter writer)
			{
				var encoding = System.Text.Encoding.UTF8;
				var encoder = new BinStringWriter(writer.BaseStream, encoding);
				// HintType
				writer.Write(((byte)(HintType)));
				// Reserved
				writer.Write(((ushort)(Reserved)));
				// AdditionalData
				encoder.Write(((string)(AdditionalData)) ?? "");
				// DataLength
				writer.Write(((int)(DataLength)));
				// TransmissionTime
				writer.Write(((long)(TransmissionTime)));
			}
		}
		
		public partial class ISOMBasePacket : FRAFV.Binary.Serialization.IBinSerializable
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual void ReadBinary(System.IO.BinaryReader reader)
			{
				// RelativeTransTime
				RelativeTransTime = ((int)(reader.ReadInt32()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual long DataSize
			{
				get
				{
					// RelativeTransTime
					long size = 4;
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public virtual void WriteBinary(System.IO.BinaryWriter writer)
			{
				// RelativeTransTime
				writer.Write(((int)(RelativeTransTime)));
			}
		}
		
		public partial class RTPPacket
		{
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void ReadBinary(System.IO.BinaryReader reader)
			{
				base.ReadBinary(reader);
				// PBit
				PBit = ((byte)(reader.ReadByte()));
				// XBit
				XBit = ((byte)(reader.ReadByte()));
				// MBit
				MBit = ((byte)(reader.ReadByte()));
				// PayloadType
				PayloadType = ((byte)(reader.ReadByte()));
				// SquenceNumber
				SquenceNumber = ((ushort)(reader.ReadUInt16()));
				// BBit
				BBit = ((byte)(reader.ReadByte()));
				// Rbit
				Rbit = ((byte)(reader.ReadByte()));
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override long DataSize
			{
				get
				{
					// PBit+XBit+MBit+PayloadType+SquenceNumber+BBit+Rbit
					long size = (base.DataSize 
								+ ((((((1 + 1) 
								+ 1) 
								+ 1) 
								+ 2) 
								+ 1) 
								+ 1));
					return size;
				}
			}
			
			[System.CodeDom.Compiler.GeneratedCodeAttribute("FRAFV.Binary.Serialization.BinSerializer", "1.0")]
			[System.Diagnostics.DebuggerNonUserCodeAttribute()]
			[System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
			public override void WriteBinary(System.IO.BinaryWriter writer)
			{
				base.WriteBinary(writer);
				// PBit
				writer.Write(((byte)(PBit)));
				// XBit
				writer.Write(((byte)(XBit)));
				// MBit
				writer.Write(((byte)(MBit)));
				// PayloadType
				writer.Write(((byte)(PayloadType)));
				// SquenceNumber
				writer.Write(((ushort)(SquenceNumber)));
				// BBit
				writer.Write(((byte)(BBit)));
				// Rbit
				writer.Write(((byte)(Rbit)));
			}
		}
	}
}
