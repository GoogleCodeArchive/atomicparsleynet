<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="GenFileVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <VersionFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            string verFile = VersionFile;
            using(StreamWriter writer = File.CreateText(verFile))
            {
              writer.WriteLine("//------------------------------------------------------------------------------");
              writer.WriteLine("// <auto-generated>");
              writer.WriteLine("//     This code was generated by a MSBuild task.");
              writer.WriteLine("//     Runtime Version:" + Environment.Version);
              writer.WriteLine("//");
              writer.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
              writer.WriteLine("//     the code is regenerated.");
              writer.WriteLine("// </auto-generated>");
              writer.WriteLine("//------------------------------------------------------------------------------");
              writer.WriteLine("using System.Reflection;");
              writer.WriteLine();
              string product = "0.0.0.";
              int revision = 0;
              var reProdVer = new Regex(@"\[assembly: AssemblyVersion\(""(?<ver>\d+\.\d+\.\d+\.)");
              var reRev = new Regex(@"\$Revision: (?<rev>\d+)");
              Match match;
              var buf = new char[2048];
              for (int i = 0; i < SourceFiles.Length; i++)
              {
                ITaskItem item = SourceFiles[i];
                if (item.GetMetadata("AutoGen") == "True") continue;
                string srcFile = item.GetMetadata("FullPath");
                string content;
                using(StreamReader reader = File.OpenText(srcFile))
                {
                  int read = reader.Read(buf, 0, buf.Length);
                  content = new string(buf, 0, read);
                }
                match = reProdVer.Match(content);
                if (match.Success)
                  product = match.Groups["ver"].Value;
                match = reRev.Match(content);
                int rev;
                if (match.Success && int.TryParse(match.Groups["rev"].Value, out rev) && rev > revision)
                  revision = rev;
              }
              writer.WriteLine("[assembly: AssemblyFileVersion(\"" + product + revision + "\")]");
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
